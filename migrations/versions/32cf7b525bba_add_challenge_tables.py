"""Add challenge tables

Revision ID: 32cf7b525bba
Revises: a9491326a1d6
Create Date: 2024-12-29 18:35:22.721935

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '32cf7b525bba'
down_revision = 'a9491326a1d6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables with CASCADE to handle dependencies
    op.execute('DROP TABLE IF EXISTS challenge_message CASCADE')
    op.execute('DROP TABLE IF EXISTS challenge_post_comment CASCADE')
    op.execute('DROP TABLE IF EXISTS challenge_post_like CASCADE')
    op.execute('DROP TABLE IF EXISTS challenge_post CASCADE')
    
    with op.batch_alter_table('challenge', schema=None) as batch_op:
        batch_op.add_column(sa.Column('creator_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('is_public', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('invite_code', sa.String(length=20), nullable=True))
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               nullable=False)
        batch_op.alter_column('start_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=False)
        batch_op.alter_column('end_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.drop_constraint('challenge_owner_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['creator_id'], ['id'])
        batch_op.create_foreign_key(None, 'custom_metric', ['metric_id'], ['id'])
        batch_op.drop_column('owner_id')
        batch_op.drop_column('is_private')

    with op.batch_alter_table('challenge_participant', schema=None) as batch_op:
        batch_op.alter_column('joined_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.drop_column('status')
        batch_op.drop_column('invitation_email')

    with op.batch_alter_table('entry', schema=None) as batch_op:
        batch_op.alter_column('water_intake',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Integer(),
               existing_nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('entry', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('water_intake',
               existing_type=sa.Integer(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)

    with op.batch_alter_table('challenge_participant', schema=None) as batch_op:
        batch_op.add_column(sa.Column('invitation_email', sa.VARCHAR(length=150), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.alter_column('joined_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)

    with op.batch_alter_table('challenge', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_private', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('challenge_owner_id_fkey', 'user', ['owner_id'], ['id'])
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('end_date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=False)
        batch_op.alter_column('start_date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               nullable=True)
        batch_op.drop_column('invite_code')
        batch_op.drop_column('is_public')
        batch_op.drop_column('creator_id')

    op.create_table('challenge_post_like',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['challenge_post.id'], name='challenge_post_like_post_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='challenge_post_like_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='challenge_post_like_pkey')
    )
    op.create_table('challenge_post',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('challenge_post_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('challenge_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['challenge_id'], ['challenge.id'], name='challenge_post_challenge_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='challenge_post_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='challenge_post_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('challenge_post_comment',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['challenge_post.id'], name='challenge_post_comment_post_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='challenge_post_comment_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='challenge_post_comment_pkey')
    )
    op.create_table('challenge_message',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('challenge_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['challenge_id'], ['challenge.id'], name='challenge_message_challenge_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='challenge_message_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='challenge_message_pkey')
    )
    # ### end Alembic commands ###
